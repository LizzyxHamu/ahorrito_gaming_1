# Nombre del Flujo de Trabajo
name: Django CI/CD Pipeline

# Eventos que disparan el flujo de trabajo
on:
  push:
    branches: [ "main", "feature/ramita_1" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # El tipo de máquina virtual en la que se ejecutará
    runs-on: ubuntu-latest
    strategy:
      # Probar con múltiples versiones de Python
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      # 1. Clona tu repositorio en la máquina virtual
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura el entorno de Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Instala las dependencias del proyecto
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # 4. LINTING: Verifica la calidad y estilo del código con flake8
      - name: Lint with flake8
        run: |
          pip install flake8
          # Detiene el build si hay errores de estilo
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Ignora algunos errores comunes pero chequea los más importantes
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # 5. FORMATEO: Verifica que el código esté formateado correctamente con black
      - name: Check formatting with black
        run: |
          pip install black
          black --check .

      # 6. EJECUTAR PRUEBAS: Corre las pruebas unitarias de Django
      - name: Run Tests
        run: |
          python manage.py test